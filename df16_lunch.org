#+TITLE: Dreamforce'16 社内共有会 - Salesforce DX
#+AUTHOR: 竹田 夏木
#+Email: natsuki.takeda@flect.co.jp
#+Date: 2016-10-20
#+REVEAL_ROOT: ./resource/reveal
#+REVEAL_THEME: moon
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 3.0
#+REVEAL_HLEVEL: 3
#+LANGUAGE: ja
#+OPTIONS: reveal_width:1600 reveal_height:1200
#+OPTIONS: creator:nil LaTeX:t date:t toc:nil H:99 reveal_title_slide:"<h2>%t</h2><h3>2016/10/20</h3><h4><div>%a</div><div>%e</div></h4>" reveal_slide_number:c/t
#+REVEAL_EXTRA_CSS: ./resource/reveal_custom.css
#+BEGIN_HTML
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-85895708-1', 'auto');
  ga('send', 'pageview');

</script>
#+END_HTML

#+ATTR_HTML: :style float:left
file:./resource/dreamforce-logo-1.png

* 最初に
** 今日話すこと
- なぜ Salesforce DXなるものを生み出すのか
	- これからSalesforceでの開発は、どう変わらなければならないのか
	- 何が必要なのか
- Salesforce DXとは
#+BEGIN_NOTES
- 紹介された内容そのもの
- まだ触れない Limited Preview
- なので、
#+END_NOTES

** いつもの
:PROPERTIES:
:reveal_background: ./resource/df16_safe_harbor.png
:END:

* なにを解決したいのか
** 開発者が求められていくこと
- Build apps faster
	- アプリの開発サイクルを早めて、素早い価値提供を継続的に
	- -> Lightning
- Build apps smarter
	- アプリをもっと親切に、スマートに
	- -> Einstein
- *Build apps together*
#+BEGIN_NOTES
- なぜ、Salesforce DXを作ったのか
- Build aps faster
"People love apps that are delivered fast to meet their needs.
And continuously improved"
- Build apps smarter
"People love apps that are smart.
They won't use apps that aren't"
- *Build apps together*
"I am my best when I work together with my team and leverage the community."
#+END_NOTES
** Build Apps Together
	- チームで協調して開発することは重要かつ必須
	- 現状、Salesforce上での開発は、チームで開発し易いものといえるか？
	-  "How you work together as a team?"「チーム開発、ツラミある」
file:./resource/dx_build_apps_together.png

** チームで開発する際の辛み
- 限られた数の組織(コードを走らせるためのRuntime) 上での開発
- コードとRuntimeの分離
	- （どこかのVCSにホストしたコード + 各Runtime上の設定）で成り立つ振る舞い
- CI/CDのお膳立てが非常に大変
	- コード管理、テスト実行環境、リリース構成管理....

* Salesforce DX
** Salesforce DXとは
- Salesforce上でチーム開発する際の「痛み」を解消するために作られた、開発者向けの新機能

file:./resource/df_ci.png


** Salesforce DXで何を変えるのか？
- ソース駆動のモダンな開発をサポート
	- ソース(app code, metadata,  *org configuration* )のバージョン管理
	- 開発・自動テストを継続的に行うための、新しいタイプの使い捨て組織
	- 各々が使い慣れたツールと連携できるような、オープンなインタフェース
file:./resource/intro_dx.png

** 新しい機能s
*** Scratch Orgs
	- 手軽に作成できる、使い捨て組織
	- 開発や自動テストでの利用を想定

file:./resource/scratch_org_create01.png

*** Salesforce DX CLI
	- scratch orgの作成、orgへのソースpush、データインポート、テストの実行などが可能
	- 開発一連の作業「開発環境作成 -> デプロイ -> データロード -> テスト」に必要なの道具立て
#+BEGIN_SRC sh
# ソースのチェックアウト
$ git clone git@github.com:great_app.git

# featureブランチ作成
$ git checkout -b great_feature

# scratch orgの作成
$ sfdx force:org:create -f config/unlimited-multicurrency-scratch-def.json -w
Successfully created workspace org: 00D4C00xx, username: workspaceorg0000@acmeorg.com

# scratch orgへのソースチェックイン
$ sfdx force:src:push -w

# scratch org内部へのアクセス権
$ sfdx force:permset:assign -n greate_app

# サンプルデータをscratch org内にimport
$ sfdx force:data:import --plan data/sample-data-plan.json

# 開発
## 編集
$ emacs force-app/main//default/flexipages/Property_record_Page.flexipage-meta-data.xml
## テスト実行（apexや seleniumテストのキック）
$ force:test -c test/test-runner-config.json
## commit
$ git commit -a -m "Updated Something Greate Feature"
## branch push
$ git push origin great_feature
## Pull Request
$ git pull-request -m "Updated Something Greate Feature"
#+END_SRC

*** 開発フロー
- 道具は揃えた
- 次に道具を組み合わせての、開発〜リリースの流れを整え CDを行うワークローの確立が必要
	- 機能開発 -> テスト -> 機能マージ-> 受け入れテスト -> 本番リリース
**** 参考: Heroku Flow
Salesforce製品の中で CDを行うためのワークフローといえば、Heroku Flow.
file:./resource/dx_heroku_flow.png

**** 参考: Heroku Pipelines
- Heroku Flowを実施するためのデプロイパイプライン作成機能
	- Pull Requestに反応して テスト環境作成
	- master mergeに反応して ステージング環境に自動デプロイ
	- ステージング環境の内容を本番環境に反映

file:./resource/heroku_pipeline.png

**** Heroku Flow/Pipelinesを踏襲
- ブランチ作成
- 開発
- Pull Request
file:./resource/dx_hot_fix.png

**** Heroku Pipelinesとの統合
	- Pull Requestに対応したReview appsの立ち上げ

file:./resource/dx_pipelines.png

**** Pull Requestの自動テストの実行
- Heroku CI (Private Beta) により自動テスト実行キックが可能に
file:./resource/dx_heroku_ci.png

*** その他機能
	- Force.com IDEの強化
		- Salesforce DX CLIの統合
		- Lighting App Builderを統合（scratch orgs上で動作）
			#+ATTR_HTML: :style width: 60%;
			file:./resource/dx_force_ide_builder.png
		- "Code Completion, Refactoring機能の強化"
	- packageing 2.0
		- multiple package from a single namespace

* いつ使えるようになるのか？
- 不明
- まだ Limited Developer Previewの段階

* つまり
- チーム開発に痛みがあることは認識している
- 世の開発プラクティスに追いつこうとしている
	- 詳細情報は明らかではないが、チーム開発フローに使える道具/手段はきっと増える

* おしまい
:PROPERTIES:
:reveal_background: ./resource/df16_safe_harbor.png
:END:

* Dreamforce16での位置づけ
- 開発者向け基調講演で大きく取り上げ
- 関連セッションもいくつか
	- Building Force.com Apps from Source
	- Deep Dive into the New Salesforce Development Experience (DX) Architecture
- Salesforce DXデモブースにはいつも聴衆が集まっている
- UXへの直接の変化ではないが、目玉の一つとは言える


* 参考資料
** Dreamforce'16 Keynote/Session
- DF16 Developers Keynote: [[https://www.salesforce.com/video/282548/][Salesforce for Developers Keynote]]
	- DXの話は 31:30ぐらいから
- DF16 Session: Building Force.com Apps from Source
	- TerraSkyのレポート http://www.terrasky.co.jp/blog/2016/161007_001856.php
** Salesforce.com 公式Webサイト
- Web: [[https://www.salesforce.com/products/platform/products/salesforce-dx/][Adopt a continuous delivery model for your Salesforce apps]]
	- 製品紹介ページ
- Web: [[https://developer.salesforce.com/platform/dx][Salesforce Developers - Salesforce DX]]
- Web: [[https://developer.salesforce.com/blogs/developer-relations/2016/10/salesforce-dx-ux-developers.html][Salesforce Developers Blog "Salesforce DX = UX For Developers"]]
** Salesforce Developers Blog "Salesforce DX = UX For Developers"
*** 前説
I talked to Wade Wegner, VP of Product Management for Salesforce DX, to ask him a few questions about exciting new changes coming soon to the Salesforce developer experience.
Salesforce DXのProduct Management VPであるところの Wade Wegnerと話して、もうすぐやってくるっちゅうSalesforce DXについていくつか質問してみたんや。

*** 位置づけ
Wade, tell me a little about Salesforce DX

Salesforce DX helps developers build together in teams.
Salesfroce DXは チームで一緒に開発するんを助けてくれる。

In many ways, it brings together the best of the Force.com and Heroku developer experiences.
Force.comとHerokuでの開発者にええ体験を提供できるはずや。

It’s a new approach that supports team collaboration with a focus on quality, predictability, and an open and standardized development lifecycle on Salesforce.
これは、チームの協調作業の品質、予測可能性に寄与し、Salesforce上での開発ライフサイクルの標準化の道を開いてくれる。

*** 詳細
A core theme of Salesforce DX is letting developers choose the tools they want.
Salesforce DXの中心たるテーマは、開発者が使いたいツールを使えるようにすることや。

For example, we’re investing in making the Force.com IDE a best-in-class solution, but with Salesforce DX and our new command-line interface,
you can use the text editor or IDE of your choice, along with the CLI, to develop your app. It’s up to you.
例えば、Force.com IDEを作ったんやが、Salesforce DXと新しいCLIを使えば、
IDEでもテキストエディタでもあんたさんの好きなもんを、新しいCLIとよしなに組み合わせて開発したらええようになるんや。

*** CI
Another example is build automation and how you run tests.
例えば自動テストを作って走らせる場合の話。

With Salesforce DX, you could use our all-new Heroku CI, currently in private beta,
combined with Heroku Pipelines enhancements to drive both continuous integration and continuous delivery.
Or you could also choose to integrate a different build automation tool, such as Jenkins or TeamCity.
Salesforce DXを使えば、新しい Heroku CI(まだ private betaやけど)とHeroku Pipelinesを組み合わせて CI/CDが実現できるんやで。
別に Heroku CIに限らんでもJenknisなりTeamCityなり好きなもん使ってくれてえんやで。


*** ソース管理
Besides being able to use my favorite tools, what’s new or different in Salesforce DX?
お宅の好きなツールを使えるようになる、その他にSalesforce DXで何が変わるんか？

One of the most important changes with Salesforce DX is that, by externalizing more of the metadata and the org shape,
we can shift the app’s “source of truth” from the Salesforce org to a version control system.
Salesforce DXで変わるめっちゃ大事なことの一つに、メタデータ、組織のshape(設定とか？)が外出できるようになることで、
アプリケーションの"真実"が、組織からVCSへと移動できるようになることや。

This standard source-driven development approach has been used by developers for years, and it’s now a core part of the Salesforce developer experience.
近年では ソースドリブンな開発が一般的になっとるし、それこそがSalesforce devloper experienceの中核なんや。

*** scratch orgs
Another key innovation for Salesforce DX is something we call the scratch org.
もひとつ、Salesforce DXのごっつい発明に scratch orgと呼んどるもんがある。

The scratch org is a brand new org type built specifically for developers and automation.
scratch orgは開発・自動（テスト？）向けの新しいタイプの組織や。

It’s ephemeral, built quickly from your source and metadata, and makes it easy to build your app consistently over and over again, which is great for team collaboration and test automation.
これは短期間だけ使う、ソースとメタデータを元に素早く作れる、簡単に繰り返し作成可能な環境や、
これでチーム開発や自動テストが捗るで。

*** scratch orgsのsandboxとの違い
It’s worth noting that scratch orgs aren’t a replacement for sandboxes.
scratch orgはsandboxを置き換えるもんとは違う。

Sandboxes are an important part of the larger development lifecycle, and work with our new source-driven development process as the destination for packages built directly from source.
Sandboxはもっと大きい開発ライフサイクルの中で大切になってくるもんで、source-drivenな開発プロセス？？

All sandbox types, from developer to full, offer the ability to act as user acceptance testing (UAT) and staging environments of the production org.
どのSandboxタイプでも（開発用sandからフルsandまで）、本番環境に対するUAT、ステージング環境として使うもんや。

I’m also really excited by the Salesforce Environment Manager, a tool we’ve created to make it easier to manage the orgs you use as part of the development process.
Salesforce Environment Managerはマジで鼻血もんや。ツールをつこうて簡単に組織の管理ができるし、開発プロセスの中で使えるようになる。

Most of these orgs will be scratch orgs, but it also allows you to manage your sandbox and production orgs.
こういう開発用の組織はほぼほぼ、scratch orgになっていくやろ。それだけやのうてサンドボックスと本番組織も管理できるようになるんや。

Furthermore, the Salesforce Environment Manager makes it easy to attach your orgs to Heroku so that they can participate inside of Heroku Pipelines, our continuous delivery tool.
さらに、 Salesforce Environment Managerは組織とHerokuを関連付けて、Heroku Pipelineに乗っかることができるようになる。

*** DXは誰が使うもの？
Is Salesforce DX only for coders? Or is Salesforce DX something admins and low-code developers would want to use, too?
Salesforce DXはコーダーだけのためのものか？ アドミンやあまりコードを開かない開発者や、他のヒトも使いたくなるものなのか？

We’re about to launch a private Developer Preview for Salesforce DX.
Salesforce DXの開発者向けprivate プレビューを用意しようとしとる。

At this time, Salesforce DX is primarily focused on coders.
こんときには、Salesforce DXはまず第一にコーダーにフォーカスしたもんになる。

But the long-term vision is for all of the Salesforce DX innovations,
starting with metadata externalization all the way to new packaging,
to make it easier for coders and non-coders to work together to build high-quality Salesforce apps.
けどな、長期的には外出したメタデータのパッケージング方法から？？
ハイクオリティなSalesforceアプリをコーダにもノンコーダもがごく簡単に一緒に開発ができるようにしていくんや。

*** Herokuアカウントいる？
Will developers need a Heroku account to use Salesforce DX?
Salesforce DX使おうおもたらｌHerokuアカウントが必要になるんか？

Not necessarily.
いや、いらん。

If you want to use Heroku Pipelines to drive continuous integration and continuous delivery for your Salesforce apps, then you’ll need a free Heroku developer account.
でもまぁ、Heorku PipilinesをつこうてSalesforceアプリのCI/CDをするんやったら、Heroku開発者アカウントは必要になるかな。

This is a scenario where Salesforce DX really shines, and highlights the best of App Cloud.
Pipelinesを使うんが、Salesforce DXを使うにおいちゃ素晴らしいシナリオではあるな。

However, if you’ve already invested in automation tools, you can use those just with your Salesforce org and Salesforce account.
でもまぁ、ジブンが既に自動化ツールの整備がしとるんやったら、Salesforceの組織とアカウントだけで切り盛りできるわ。

*** motto kwsk
How can developers learn more about Salesforce DX at Dreamforce ‘16?
Dreamforce' 16で紹介された Salesforce DXの詳しい情報はどこにあるんや？

I’d encourage everyone who didn’t attend the Developer Keynote to watch the live recording.
まずは Developer Keynote見てくれや。参加してなくても録画が見られるで。

We also have a number of fantastic sessions you’ll want to attend, and a booth in the Developer Forest staffed with members of our engineering team. You don’t want to miss it!
ファンタスティクなセッションがたくさんあるからな、Developer Forestにおるスタッフとか開発チームのおるブースもやで。
見逃すなや。
** Peter Knolle "Salesforce DX Quick Take"
*** この記事について
Salesforce DX was announced at Dreamforce 2016 as a new way to manage and develop Salesforce apps.
Dreamforce 2016にて、Salesforceアプリを管理・開発するための新しい方法として、Salesforce DXがお披露目されたで。

It is a new and much improved Salesforce Developer Experience.
Salesforceでの開発者体験としちゃ、新しいしめっちゃ改善しとる。

The rest of this article consists of my thoughts on platform development in the past, the future
with Salesforce DX, and some of my hopes for Salesforce DX based on my experiences and what I saw at Dreamforce.
この記事は今までのプラットフォーム上での開発の思うところとか、いずれくるSalesforce DXを使った場合のこととか、
Dreamforceで見てみたり自分の経験と照らしあわせせてみたりしたところで「こうであって欲しい」と思うとことを書く

*** 今まで
The Past

To be frank, trying to apply best practices and processes of traditional software development on the Salesforce platform has always
taken a substantial amount of effort to set up. 
雑な物言いなるけど、Salesforceプラットフォーム上でソフトウェア開発のベストプラクティスとか定番のプロセスを試そうとしよったら、
その準備にかなり気合入れなあかん。

Even after that initial investment of setting up a process
and figuring out how to shoehorn in things like distributed development, version control, branching, merging, and CI,
it has always been much more complicated to develop with than other tech stacks. 
初期設定のプロセスに始まり、そこから 分散開発、バージョンコントロール、ブランチ、マージ、 CIといった諸々を
どこに押し込めるか突き詰めていくと、
他の技術スタックを使う時よりずっとややこしくなるもんや。

Developers are used to working on tech stacks such as Java/Spring, .NET, node.js,
that have had all of that figured out for a long time.
Java/Springとか .NETとか node.jとか、その辺の技術スタック界隈では長い時間をかけて諸々を解決してきた。
#+BEGIN_COMMENTS
FIX ME
#+END_COMMENTS

*** これから
Salesforce DX is the solution to those problems.
Salesforce DXがこの問題への解になる。

It will standardize a set of tools, APIs, and best practices for development on the Salesforce platform.
開発のツール、API、ベストプラクティスを統一してくれるモンになるやろな。

The goal, as I see it, 
is to make it inexcusable to not use best practices we software developers have been using on other tech stacks for years.
つまるところ「他の技術スタックで長年かけて培ったベストプラクティスが使えないって、それマジありえんくね」ってことやと思うねんな。

This will have a positive side effect of attracting and keeping other talented developers on the platform.
（せやからSalesforce DXが来たら？）イケてるエンジニアもSalesforce開発をやる（やめない）ようにできるやろな。

*** オニューのCLI
The new command line interface adds additional commands via the Heroku CLI (a.k.a. Heroku Toolbelt).
新しいCLIは Heroku CLI (またの名を Heroku Toolbelt)から、いろんなコマンドを輸入しとる。

This is core to the development experience.
これがDXのメインどころや。

It is used by the IDE.
IDEからも使えるで。

It can be added into any other automated processes such as continuous integration, automated build scripts, or deployments.
CIとかビルドスクリプトとかデプロイなんかの処理もいろいろ入ってるで。

I believe a solid command line is core to everything. 
ワイはな、質実剛健なコマンドラインこそが物事の基礎やと思うんや。

Give the developers a rich and complete set of basic commands
and they’ll use them and come up with new, better, unexpected ways as well.
ベースのマトモなコマンドさえ十分にあれば、開発者はそれをすぐ使いこなして新しくて、よりよい、びっくりするようなええ方法を考えつきよる。

Of the existing functionality (i.e., have been able to do for a while by a different means),
I am particularly interested in the data loading.
既存機能の中で、ワイが特に興味があるんがデータロードやな。

One of the best practices is to check in DML which can be used to share solid test data.
ちゃんとしたテストデータとして使いまわせるようなDMLを使うんがひとつの近道や
#+BEGIN_COMMENTS
FIX ME
#+END_COMMENTS

I see this overlooked with Salesforce all of the time,
perhaps because it can be a bit more difficult to automate with the data loader.
Salesforce使うとき大概見落とされてるように思うんやけど、
それはデータローダー使う処理を自動化するのがちっと難しいからやと思うんや。

**** CLIのこうだったらええな

- It will be easier to incorporate test data into development processes 
  - 開発のプロセスの中で簡単にテストデータを突っ込めること
- Other devs will add in commands that they’ve been using in their own orgs 
  - みんながそれぞれの組織で使ったのと同じコマンドを、他の開発者が使えるようになること（？ cli使ったsnippet/scriptの共有）
- Other devs will improve the existing commands 
  - 開発者が既存のコマンドを改良していくこと
- The CLI will be extendable, but grow only as needed 
  -CLIが拡張可能で、必要な分だけ成長していけること




これが


参照元: http://peterknolle.com/
